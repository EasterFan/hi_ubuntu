{"./":{"url":"./","title":"开始吧!","keywords":"","body":"开始 这是一个关于 ubuntu 环境搭建，软件配置的面向 Ubuntu 新手的开源项目。 作者是一个折腾 Ubuntu 两年多的学生，从虚拟机到双系统，在 Windows 里装 ubuntu，在 ubuntu 里装 windows踩过的坑比走过的路多，写过的 bug 比代码多，还折腾的不亦乐乎 从 Ubuntu 到 github，从一个开源社区到另一个开源社区，身临其境的感受真正的自由平等开放的互联网精神， 成千上万素未谋面的人共同努力的贡献，和在这种精神和人的推动下孕育出的优秀的开源作品，惊异而感叹 我也想成为开源社区的一员。 临近毕业，在最后的几个月里做了这个项目，虽然很简单，但我要把它作为我的开源精神的萌芽，也作为大学四年我在开源社区收获的总结， 在毕业的时候还能留下点，回忆？ hhh TODO [x] 添加在线编辑功能 [ ] 换个肤，加个背景之类的 [ ] bgm ？ 随机播放的那种 [ ] 写一个setup脚本，一键安装所有软件 [x] 支持小表情图标 ？ [x] 网页计数器（卜蒜子或重新生成时记录不会被清空） [x] 分享到QQ 微信 ？？好像没太大必要。。 [ ] 添加一个 “关于我” [ ] RSS 订阅 Log 2019-04-01 0.1版 gitbook 支持实现雏形2019-03-31 大体框架形成某年某月 突然产生的想法 No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"01_ 重装/":{"url":"01_ 重装/","title":"01_ 重装","keywords":"","body":"No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"01_ 重装/1_准备工作.html":{"url":"01_ 重装/1_准备工作.html","title":"1_准备工作","keywords":"","body":"备份 工具整理 （占坑，以后补） No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"01_ 重装/2_安装过程.html":{"url":"01_ 重装/2_安装过程.html","title":"2_安装过程","keywords":"","body":"占坑 No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"01_ 重装/3_初始化设置.html":{"url":"01_ 重装/3_初始化设置.html","title":"3_初始化设置","keywords":"","body":"换源 桌面环境，采用图形界面换源：system settings > Software & Updates > Download from值改为阿里云源： http://mirrors.aliyun.com/ubuntu 命令行换源，参考这个博客 unzip 解压中文乱码问题 unzip 解压文件出现中文乱码现象，有一部分原因是因为文件是在 Windows 系统上用 GBK 压缩的，在 ubuntu 上用 UTF 解压时，中文就乱码了一种解决方法是在命令行解压时指定编码（使用 gnomo 解压管理器依然乱码），一种是安装其他解压软件（为了节省空间我用的第一种～） vim ~/.bashrc # upzip add encode alias unzip=\"unzip -O CP936\" source ~/.bashrc 开机无法自动挂载其他分区问题 我的硬盘是1T， 分给Ubuntu的启动分区是 20G ，去掉 windows 的 100G 分区，还有大概 600G 的闲置分区，一个很典型的问题是，链接到这个 600G 分区的快捷方式每次在重启后都会失效， idea 和 atom 开机后就会检测这个路径失效，需要重新打开这个目录（路径长了就很麻烦）所以我要做的就是让 ubuntu 开机就能挂载我的闲置分区。 1. 查看当前分区情况 sudo fdisk -l 根据磁盘给出的信息，确定想挂载的的磁盘（sda4），以及想挂载的位置（/mnt）所以现在我的目的就是把 dev/sda4 挂载到 /mnt/data 下。（/mnt/data 需要自己创建） 2. 创建挂载目录 sudo mkdir /mnt/data 3. 开始挂载 sudo mount /dev/sda4 /mnt/data/挂载完成后进入到 /mnt/data 查看，验证我的 600G 已经挂载成功了 4. 设置开机自动挂载 挂载后重启进入到/mnt/data查看，已经是空目录了，所以还需要配置一下，实现开机自动挂载。 4.1 查询挂载硬盘 UUID sudo blkid /dev/sda4 根据返回信息，得到 UUID 的值是ac893ed7-9da2-4ef9-ad4c-bc9e3d1d9800磁盘格式是 ext4 4.2 将 UUID 添加到自动挂载目录中 sudo vim /etc/fstab 在文件末尾添加磁盘信息，按照下面格式：[UUID=************] [挂载磁盘分区] [挂载磁盘格式] 0 2 UUID=ac893ed7-9da2-4ef9-ad4c-bc9e3d1d9800 /mnt/data ext4 defaults 0 2 第一个数字：0表示开机不检查磁盘，1表示开机检查磁盘；第二个数字：0表示交换分区，1代表启动分区（Linux），2表示普通分区我的闲置分区是在安装Ubuntu时利用剩余空间创建的，磁盘格式为ext4 【提示～】：挂载成功后，重启后原来的链接还是会失效～删除就可以，然后从 /mnt目录创建链接，这个链接是永久有效的～～ 中文输入法（搜狗） 1. 64位linux http://10.182.80.11/cache/11/01/cdn2.ime.sogou.com/a1b78ad374f269e758526a230270991b/sogoupinyin_2.2.0.0102_amd64.deb?st=Yy10RkLzjGfU7wdVx33Wgw&e=1520948215&fn=sogoupinyin_2.2.0.0102_amd64.deb 2. 安装 sudo dpkg -i sogoupinyin_2.2.0.0102_amd64.deb sudo apt-get install -f 3. 配置 配置System settings进入System Settings > Language Support > Keyboard input method system将值改为fcitx 然后注销重启 在bash中打开 fcitx Configure Input Method 下添加sogou Pinyin 4. 自定义短语设置 自定义简称，懒人福音设置/高级/自定义短语设置 我的配置文件 sj,1=#$year-$month_mm-$day_dd- 可惜搜狗输入法linux下没有截屏插件~暂时用 shutter 代替 No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"01_ 重装/4_系统美化.html":{"url":"01_ 重装/4_系统美化.html","title":"4_系统美化","keywords":"","body":"一. 卸载不常用软件 系统自带的游戏，和其他不常用软件,提升速度 // Amazon 软件 sudo apt-get remove unity-webapps-common // 各种游戏 libreoffice sudo apt-get remove totem （视频播放器） sudo apt-get remove rhythmbox（音乐播放器） sudo apt-get remove empathy sudo apt-get remove brasero sudo apt-get remove simple-scan sudo apt-get remove gnome-mahjongg sudo apt-get remove aisleriot sudo apt-get remove gnome-mines sudo apt-get remove transmission-common sudo apt-get remove gnome-orca sudo apt-get remove webbrowser-app sudo apt-get remove gnome-sudoku sudo apt-get remove libreoffice-common 二. 同步双系统时间 sudo apt-get install ntpdate sudo ntpdate time.windows.com sudo hwclock --localtime --systohc 三. 更改 Dash （以前改过，现在默认dash也不错～，占坑） 四. 图标设置为双击最小化 gsettings set org.compiz.unityshell:/org/compiz/profiles/unity/plugins/unityshell/ launcher-minimize-window true No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"02_环境/":{"url":"02_环境/","title":"02_环境","keywords":"","body":"No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"02_环境/1_Git环境.html":{"url":"02_环境/1_Git环境.html","title":"1_Git环境","keywords":"","body":"安装 Git 并升级至最新版 sudo apt-get install git sudo add-apt-repository ppa:git-core/ppa sudo apt update sudo apt install git # 检验 git --version SSH密钥配置 配置后不需要总输入密码 生成密钥 -- 指定位置和名称 # 生成密钥 ssh-keygen -t rsa -C \"xxxx@gmail.com\" -f ~/.ssh/test_github （遇到过 ssh 每过一段时间就失效的问题，用下面的步骤，一般用上面一个就够了） # 确认ssh-agent处于启用状态 -- 输出 PID eval \"$(ssh-agent -s)\" # 将SSH key添加到ssh-agent ssh-add ~/.ssh/test_github # 测试连接 ssh -vT git@github.com 复制公钥将test-github.pub文件的内容添加到github的“SSH KEYS”里面 导入 .gitconfig 包含个人信息和别名配置 先进入cd ~/.gitconfig,再修改 [user] email = xxxx@gmail.com name = EasterFan [alias] ci = commit st = status hi = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short pu = push origin master No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"02_环境/2_nodejs环境.html":{"url":"02_环境/2_nodejs环境.html","title":"2_nodejs环境","keywords":"","body":" 安装nvm-----配置nvm环境变量----安装node ----淘宝cnpm加速 一. 安装 nvm nvm是一个开源的 Node 版本管理器，通过简单的 bash 脚本来管理、切换多个 Node.js 版本,使用 nvm 可以安装官网最新版本之前的任意版本,可以任意切换不同版本 下载： git clone https://github.com/creationix/nvm.git ~/.nvm && cd ~/.nvm && git checkout `git describe --abbrev=0 --tags` 配置环境变量： # 打开文件 vim ~/.bashrc # 加入位置 source ~/.nvm/nvm.sh export NVM_DIR=\"/Users/YOURUSERNAME/.nvm\" [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" # This loads nvm # 检验 source ~/.bashrc nvm --version 二. 安装 node # 查找 node 版本 nvm ls-remote # 安装node版本并设为默认node nvm install 8.10.0 nvm alias default 8.10.0 # 检验 node --version npm -v # 查看已安装的node nvm ls # 切换 node 版本 nvm use 8.10.0 # 卸载node nvm uninstall 8.10.0 node 8.10.0对应的npm 是5.6.0？？ 三.淘宝 cnpm 加速 # 下载 npm install -g cnpm --registry=https://registry.npm.taobao.org # 验证 cnpm -v 淘宝npm镜像 No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"02_环境/3_jekyll环境.html":{"url":"02_环境/3_jekyll环境.html","title":"3_jekyll环境","keywords":"","body":" github pages 托管的静态博客，我的：https://easterland.me/ 1. 安装 ruby-install wget -O ruby-install-0.6.1.tar.gz https://github.com/postmodern/ruby-install/archive/v0.6.1.tar.gz tar -xzvf ruby-install-0.6.1.tar.gz cd ruby-install-0.6.1/ sudo make install 2. 安装 ruby # 过程漫长 sudo ruby-install --system ruby # 检验 ruby -v 3. 安装 jekyll # jekyll要在ruby2.0以上的版本才能安装成功 sudo gem install jekyll # 验证 jekyll --help 4. 安装bundler jekyll的运行依赖bundler包 sudo gem install bundler # 验证 jekyll new blog 至此，jekyll环境已经安装完成，进入博客仓库，运行 bundle install npm start No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"02_环境/4_gitbook环境.html":{"url":"02_环境/4_gitbook环境.html","title":"4_gitbook环境","keywords":"","body":" gitbook 需要 node 环境 一. 安装 gitbook # 安装 cnpm install gitbook-cli -g # 检验 -- 时间较长 gitbook -V 一些其他操作 # 列出远程所有可用版本 gitbook ls-remote # 列出本地所有已安装版本 gitbook ls # 卸载本地某版本 gitbook uninstall x.x.x 二. 安装 gibook 插件 自动生成 summary 文件 # 安装 npm install -g gitbook-summary # 启动 book sm npm 插件 github-pages 一键发布插件 npm install -g gh-pages gh-pages -d _book 三. 安装 atom 1. 下载 下载 2. 安装插件 表格功能： atom-csv-markdown粘贴图片改路径：Markdown-img-paste -- 在 settings 中设置图片路径(超级喜欢，可是作者不维护了～)同步预览：markdown-scroll-sync No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"02_环境/5_Java环境.html":{"url":"02_环境/5_Java环境.html","title":"5_Java环境","keywords":"","body":"Open JDK8 sudo apt-get update sudo apt-get install openjdk-8-jdk java -version Oracle JDK 可以参考这个博客http://topspeedsnail.com/ubuntu16-install-java-jdk/ No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"02_环境/6_ss环境.html":{"url":"02_环境/6_ss环境.html","title":"6_ss环境","keywords":"","body":"1.安装shadowsocks sudo add-apt-repository ppa:hzwhuang/ss-qt5 sudo apt-get update sudo apt-get install shadowsocks-qt5 2.下载Google 也可以链接到自己的仓库下载 对版本没有太高要求的话，在 https://www.google.cn/chrome/可下载（中国版？） sudo wget https://repo.fdzh.org/chrome/google-chrome.list -P /etc/apt/sources.list.d/ wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add - sudo apt-get update sudo apt-get install google-chrome-stable 3. SwitchyOmega 1. 下载安装 # 下载 SwitchyOmega 和它的配置文件 wget https://github.com/EasterFan/hi_ubuntu/blob/master/04_%E5%B0%BE%E5%B7%B4/Proxy-SwitchyOmega_v2.3.21.crx wget https://github.com/EasterFan/hi_ubuntu/blob/master/04_%E5%B0%BE%E5%B7%B4/ChromeOmegaOptions.bak 打开chrome浏览器，在浏览器地址栏输入“chrome://extensions/”，将刚下载的插件拖放进去，按提示操作即可完成安装。 2. 配置 将浏览器配置脚本导入插件(这是我的配置文件，可以直接导入，也可以根据需要自己修改) 将端口改为“1080”，然后点“应用选项”在谷歌首页菜单点击插件选择“自动切换”，完成。 （我当前备份的 SwitchyOmega 是 v2.3.21，安装成功后可以到谷歌应用商店更新到最新版～） 4. ss设为开机自启 在ubuntu software里搜索并安装“startup” 打开startup，将shadowsocks添加到开机启动项即可。 5. ss 代理终端 ss 代理终端有很多种，第三方软件代理，直接在命令后加参数，或者修改配置文件，修改配置文件相比更方便，而且自己可以控制只对特定的命令进行代理(主要代理 curl wget)。 代理 http/https , 加速 wget curl vim ~/.bashrc # ss terminal cross fire alias alias ss=\"http_proxy=http://localhost:8123\" source ~/.bashrc # 验证(ip.gs 或 cip.cc 都可以) ss curl ip.gs 代理 https ， 加速 git clone 其实这一步配置和上一个是一样的，都是 ss 代理 https 协议，单独列出来是为了和下面代理 git 协议对称～ vim ~/.gitconfig [alias] clones = clone --config http.proxy=localhost:8123 # 验证 git clones + [git 地址] 配置完成后，git clone + https 仓库 时，速度一般在 1M 上下（不加速时是0-30k）。 代理 git ， 加速 git clone/pull clone 别人的仓库时可以加速，但是走git 协议 git clone git pull 自己的仓库，依然是几k。ss 走 socket 协议，git 走 git 协议，所以要配置 ss 代理 git 协议。 花了几天时间找各种 socks 代理 git 的方法，太复杂了，实际上 git 协议底层是走 ssh 协议的，然后曲线救国，通过代理 ssh 达到间接代理 git 协议的目的。 vim ~/.ssh/config Host github.com User git ProxyCommand nc -x localhost:1080 %h %p No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"02_环境/7_chrome环境.html":{"url":"02_环境/7_chrome环境.html","title":"7_chrome环境","keywords":"","body":" 牛逼 常用谷歌插件 油猴脚本专栏 谷歌日历 No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"03_利器/":{"url":"03_利器/","title":"03_利器","keywords":"","body":"No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"03_利器/1_大而全.html":{"url":"03_利器/1_大而全.html","title":"1_大而全","keywords":"","body":" 重要必备的软件 坚果云 云盘同步 Jetrains Toolbox 全家桶 下载后解压运行，然后登录学生账号。 XMind Zen 下载 64 位 deb 安装包： http://www.xmind.net/xmind/downloads/xmind-7.5-update1-linux_amd64.deb sudo dpkg -i xmind-7.5-update1-linux_amd64.deb OBS SendAnyWhere 手机和电脑间文件互传 有可能会弃用速度很慢（国内原因？） 功能冗余（宣传大于功能本身）暂时还没有找到很好的替代qq 微信的方法～ Vmware 必备 VLC media player 全能的视频播放器 sudo apt install vlc WPS 广告相对较少了～～ 下载 - http://linux.wps.cn/ 1. 安装 sudo dpkg -i program_name.deb // 如果出错 sudo apt-get install -f 2.解决 wps 字体缺失问题 # 下载 wps 缺失的字体包 wget https://github.com/EasterFan/hi_ubuntu/blob/master/04_%E5%B0%BE%E5%B7%B4/wps_symbol_fonts.zip sudo unzip wps_symbol_fonts.zip sudo mv mtextra.ttf symbol.ttf WEBDINGS.TTF wingding.ttf WINGDNG2.ttf WINGDNG3.ttf /usr/share/fonts 然后字体包可以删除了 No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"03_利器/2_小而美.html":{"url":"03_利器/2_小而美.html","title":"2_小而美","keywords":"","body":"peek peek 用于录屏成gif/MP4 进行展示, github地址 （虽然linux版本一直停留在0.75，但完全够我用） 简单安装: sudo add-apt-repository ppa:peek-developers/stable sudo apt update && sudo apt install peek 原始安装: sudo apt-get update wget https://github.com/phw/peek/releases/download/v0.8.0/peek-0.8.0-Linux.deb sudo apt install libsdl1.2debian ffmpeg libavdevice-ffmpeg56 sudo dpkg -i peek-0.8.0-Linux.deb sudo apt-get -f install shutter shutter 用于截图编辑加序号（标注功能很赞，但就是启动有些耗时QAQ） sudo apt-get install shutter 配置截图快捷键: system settings --> Keyboard --> Shortcuts ---> Custom Shortcuts autojump 快速的文件导航小工具，基本上 1 秒打开我想找的任何文件 安装 // 安装 sudo apt install autojump // 配置 bash vim ~/.bashrc . /usr/share/autojump/autojump.sh // 查看更详细的信息 cat /usr/share/doc/autojump/README.Debian 常用命令 // 查看目录权重 j -s // 使用文件管理器打开 jco 目录 // 定期从 atuojump 中清除已删除的mulv j --purge uGet - 下载 uGet 是一款 Linux 下支持多点下载和断线续传的下载工具。 sudo apt update sudo apt install aria2 uget 安装完成以后在 uGet 的设置选项中的Plugin面板开启aria2支持，这样能够在以后下载时使用多点下载功能。 KeePass2 KeePass2 和 1Password 我两个都在用，用来存储安全系数比较低的密码，1Password 在浏览器中用着更方便（时时清cookie） PS：财务相关，个人身份信息相关的重要账号坚决不使用密码管理器，我很相信加密算法的安全性，但信息泄露最薄弱的环节是人，所有密码都用密码管理器托管，一旦泄露，就不是简单的裸奔了，简直是裸奔到手术台上等着别人解剖了，而且自己还不一定知道解剖是什么时候就已经开始的～ 密码管理器只用于托管不太重要的密码，重要密码，心算也是一个不错的办法。 ppa 图形化管理工具 方便的整理清除PPA源 sudo add-apt-repository ppa:webupd8team/y-ppa-manager sudo apt-get update sudo apt-get install y-ppa-manager No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"03_利器/3_通讯向.html":{"url":"03_利器/3_通讯向.html","title":"3_通讯向","keywords":"","body":"telegram sudo add-apt-repository ppa:atareao/telegram sudo apt-get update sudo apt-get install telegram wechat 微信网页版，解压即用 作者也不维护了，不过还能用 https://github.com/geeeeeeeeek/electronic-wechat TIM 以后出学校未必用了使用的是 deepin 商店打包的 tim下载 deb 包，http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/ # 安装 wine dpkg -i xxx.deb 同样的可以下载百度网盘 deepin-wine-ubuntu 更多打包 - https://github.com/wszqkzqk/deepin-wine-ubuntu Skype Skype 是目前唯一能够跨平台，在 Linux 下支持文字、语音、视频沟通且世界流行的即时通讯工具，请使用微软帐号登陆。 curl https://repo.skype.com/data/SKYPE-GPG-KEY | sudo apt-key add - echo \"deb [arch=amd64] https://repo.skype.com/deb stable main\" | sudo tee /etc/apt/sources.list.d/skype-stable.list sudo apt update sudo apt install skypeforlinux No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 17:26:48 "},"03_利器/4_开发向.html":{"url":"03_利器/4_开发向.html","title":"4_开发向","keywords":"","body":" 不常用但偶尔要安装的～ SecureCRT 官网下载要注册很麻烦～备份一个 wget https://github.com/EasterFan/hi_ubuntu/blob/master/04_%E5%B0%BE%E5%B7%B4/scrt-8.5.2-1799.ubuntu16-64.x86_64.deb mysql sudo apt-get install mysql-server 执行mysql -u root -p 密码即可登录数据库，ctr+z可退出。 密码：123456 No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "},"04_尾巴/":{"url":"04_尾巴/","title":"04_尾巴","keywords":"","body":"尾巴 这个目录下放整个过程用到的插件, 和个人的配置文件目录（也是重装前需要备份的东西） 配置文件 全局配置文件 ~/.bashrcgit 配置文件 ~/.gitconfigidea 配置文件 重装前要提前下载的东西 No Start， No End all right reserved，powered by GitbookStill laughing at： 2019-04-03 13:09:24 "}}